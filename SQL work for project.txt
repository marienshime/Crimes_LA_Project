/*

-----------------------------------------------------------------------------------------------------------------------------------
                                               Guidelines
-----------------------------------------------------------------------------------------------------------------------------------

The provided document is a guide for the project. Follow the instructions and take the necessary steps to finish
the project in the SQL file			
-----------------------------------------------------------------------------------------------------------------------------------

											Database Creation
                                               
-----------------------------------------------------------------------------------------------------------------------------------
*/

-- [1] To begin with the project, you need to create the database first
-- Write the Query below to create a Database
DROP DATABASE IF EXISTS crime;
CREATE DATABASE crime;

-- [2] Now, after creating the database, you need to tell MYSQL which database is to be used.
-- Write the Query below to call your Database
USE crime;

/*-----------------------------------------------------------------------------------------------------------------------------------

                                               Tables Creation
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/

-- [3] Creating the tables:

/*Note:
---> To create the table, refer to the ER diagram and the solution architecture.Â 
---> Refer to the column names along with the data type while creating a table from the ER diagram.
---> If needed revisit the videos Week 2: Data Modeling and Architecture: Creating DDLs for Your Main Dataset and Normalized Datasets
---> While creating a table, make sure the column you assign as a primary key should uniquely identify each row.
---> If needed revisit the codes used to create tables for the gl_eats database. 
     This will help in getting a better understanding of table creation.*/
     
/* List of tables to be created.

 Create a table temp_t, crime_t, location_t, victim_t, report_t, officer_t */

-- Syntax to create table-

-- To drop the table if already exists
DROP TABLE IF EXISTS temp_t; -- Change the name of table_name to the name you have given.                             


-- To create a table- 
CREATE TABLE temp_t (
REPORT_NO INTEGER,
INCIDENT_TIME TIME, 
COMPLAINT_TYPE VARCHAR(10),
CCTV_FLAG VARCHAR(5),
PRECINCT_CODE INTEGER,
AREA_CODE INTEGER,
AREA_NAME VARCHAR(20),
CCTV_COUNT INTEGER,
POPULATION_DENSITY INTEGER,
ROUNDS_PER_DAYS INTEGER,
CRIME_CODE INTEGER, 
CRIME_TYPE VARCHAR(30),
WEAPON_CODE INTEGER,
WEAPON_DESC VARCHAR(30),
CASE_STATUS_CODE CHAR(2),
CASE_STATUS_DESC VARCHAR(30),
VICTIM_CODE INTEGER,
VICTIM_NAME VARCHAR(20),
VICTIM_SEX CHAR(1),
VICTIM_AGE INTEGER,
WAS_VICTIM_ALONE VARCHAR(3),
IS_VICTIM_INSURED VARCHAR(3),
OFFENDER_CODE INTEGER, 
OFFENDER_NAME  VARCHAR(20),
OFFENDER_SEX CHAR(1),
OFFENDER_AGE INTEGER,
REPEATED_OFFENDER VARCHAR(3),
NO_OF_OFFENCES INTEGER,
OFFENDER_RELATION VARCHAR(3),
OFFICER_CODE INTEGER,
OFFICER_NAME VARCHAR(30),
OFFICER_SEX CHAR(1),
AVG_CLOSE_DAYS INTEGER,
WEEK_NUMBER INTEGER,
PRIMARY KEY (AREA_CODE, VICTIM_CODE, REPORT_NO, OFFICER_CODE)  
);                       

-- Create a table crime_t-

DROP TABLE IF EXISTS crime_t;
CREATE TABLE crime_t (
REPORT_NO INTEGER,
INCIDENT_TIME TIME, 
COMPLAINT_TYPE VARCHAR(10),
CCTV_FLAG VARCHAR(5),
PRECINCT_CODE INTEGER,
AREA_CODE INTEGER,
AREA_NAME VARCHAR(20),
CCTV_COUNT INTEGER,
POPULATION_DENSITY INTEGER,
ROUNDS_PER_DAYS INTEGER,
CRIME_CODE INTEGER, 
CRIME_TYPE VARCHAR(30),
WEAPON_CODE INTEGER,
WEAPON_DESC VARCHAR(30),
CASE_STATUS_CODE CHAR(2),
CASE_STATUS_DESC VARCHAR(30),
VICTIM_CODE INTEGER,
VICTIM_NAME VARCHAR(20),
VICTIM_SEX CHAR(1),
VICTIM_AGE INTEGER,
WAS_VICTIM_ALONE VARCHAR(3),
IS_VICTIM_INSURED VARCHAR(3),
OFFENDER_CODE INTEGER, 
OFFENDER_NAME  VARCHAR(20),
OFFENDER_SEX CHAR(1),
OFFENDER_AGE INTEGER,
REPEATED_OFFENDER VARCHAR(3),
NO_OF_OFFENCES INTEGER,
OFFENDER_RELATION VARCHAR(3),
OFFICER_CODE INTEGER,
OFFICER_NAME VARCHAR(30),
OFFICER_SEX CHAR(1),
AVG_CLOSE_DAYS INTEGER,
WEEK_NUMBER INTEGER,
PRIMARY KEY (AREA_CODE, VICTIM_CODE, REPORT_NO, OFFICER_CODE)  	
);

-- Create a table location_t-

DROP TABLE IF EXISTS location_t;
CREATE TABLE location_t (
AREA_CODE INTEGER,
AREA_NAME VARCHAR(20),
CCTV_COUNT INTEGER,
POPULATION_DENSITY INTEGER,
ROUNDS_PER_DAYS INTEGER,
PRIMARY KEY (AREA_CODE)    
);

-- Create a table victim_t-

DROP TABLE IF EXISTS victim_t;
CREATE TABLE victim_t (
VICTIM_CODE INTEGER,
VICTIM_NAME VARCHAR(20),
VICTIM_AGE INTEGER,
VICTIM_SEX CHAR(1),
WAS_VICTIM_ALONE VARCHAR(3),
IS_VICTIM_INSURED VARCHAR(3),
PRIMARY KEY (VICTIM_CODE)         	
);

-- Create a table report_t-

DROP TABLE IF EXISTS report_t;
CREATE TABLE report_t (
REPORT_NO INTEGER,
INCIDENT_TIME TIME, 
COMPLAINT_TYPE VARCHAR(10),
CCTV_FLAG VARCHAR(5),
AREA_CODE INTEGER,
VICTIM_CODE INTEGER,
OFFICER_CODE INTEGER,
OFFENDER_CODE INTEGER, 
OFFENDER_NAME  VARCHAR(20),
OFFENDER_AGE INTEGER,
OFFENDER_SEX CHAR(1),
REPEATED_OFFENDER VARCHAR(3),
NO_OF_OFFENCES INTEGER,
OFFENDER_RELATION VARCHAR(3),
CRIME_CODE INTEGER, 
CRIME_TYPE VARCHAR(30),
WEAPON_CODE INTEGER,
WEAPON_DESC VARCHAR(30),
CASE_STATUS_CODE CHAR(2),
CASE_STATUS_DESC VARCHAR(30),
WEEK_NUMBER INTEGER,
PRIMARY KEY (REPORT_NO) 
);

-- Create a table officer_t-

DROP TABLE IF EXISTS officer_t;
CREATE TABLE officer_t (
OFFICER_CODE INTEGER,
OFFICER_NAME VARCHAR(30),
OFFICER_SEX CHAR(1),
AVG_CLOSE_DAYS INTEGER,
PRECINCT_CODE INTEGER,
PRIMARY KEY (OFFICER_CODE) 
);


/*-----------------------------------------------------------------------------------------------------------------------------------

                                               Stored Procedures Creation
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/

-- [4] Creating the Stored Procedures:

/*Note:

---> If needed revisit the video: Week 2: Data Modeling and Architecture: Introduction to Stored Procedures.
---> Also revisit the codes used to create stored procedures for the gl_eats database. 
	 This will help in getting a better understanding of the creation of stored procedures.*/
     
/* List of stored procedures to be created.

   Creating the stored procedure for crime_p, location_p, officer_p, report_p, victim_p */
   
-- Syntax to create stored procedure-

-- To drop the stored procedure if already exists- 
DROP PROCEDURE IF EXISTS crime_p;
DELIMITER $$ 
CREATE PROCEDURE crime_p()
BEGIN
       INSERT INTO crime_t (
REPORT_NO,
INCIDENT_TIME, 
COMPLAINT_TYPE,
CCTV_FLAG ,
PRECINCT_CODE,
AREA_CODE,
AREA_NAME,
CCTV_COUNT,
POPULATION_DENSITY,
ROUNDS_PER_DAYS,
CRIME_CODE, 
CRIME_TYPE,
WEAPON_CODE,
WEAPON_DESC,
CASE_STATUS_CODE,
CASE_STATUS_DESC,
VICTIM_CODE,
VICTIM_NAME,
VICTIM_SEX,
VICTIM_AGE,
WAS_VICTIM_ALONE,
IS_VICTIM_INSURED,
OFFENDER_CODE, 
OFFENDER_NAME,
OFFENDER_SEX,
OFFENDER_AGE,
REPEATED_OFFENDER,
NO_OF_OFFENCES,
OFFENDER_RELATION,
OFFICER_CODE,
OFFICER_NAME,
OFFICER_SEX,
AVG_CLOSE_DAYS,
WEEK_NUMBER             
) 
   SELECT * FROM temp_t;
END;
CALL crime_p();

-- Create a Stored Procedure location_p-

DROP PROCEDURE IF EXISTS location_p;
DELIMITER $$ 
CREATE PROCEDURE location_p()
BEGIN
	INSERT INTO location_t(
AREA_CODE,
AREA_NAME,
CCTV_COUNT,
POPULATION_DENSITY,
ROUNDS_PER_DAYS	
) 
   SELECT DISTINCT
AREA_CODE,
AREA_NAME,
CCTV_COUNT,
POPULATION_DENSITY,
ROUNDS_PER_DAYS
  FROM crime_t WHERE AREA_CODE NOT IN (SELECT DISTINCT AREA_CODE FROM location_t);
END; 
CALL location_p();

-- Create a Stored Procedure victim_p-

DROP PROCEDURE IF EXISTS victim_p;
DELIMITER $$ 
CREATE PROCEDURE victim_p ()
BEGIN
	INSERT INTO victim_t(
VICTIM_CODE,
VICTIM_NAME,
VICTIM_AGE,
VICTIM_SEX,
WAS_VICTIM_ALONE,
IS_VICTIM_INSURED
) 
   SELECT  DISTINCT
VICTIM_CODE,
VICTIM_NAME,
VICTIM_AGE,
VICTIM_SEX,
WAS_VICTIM_ALONE,
IS_VICTIM_INSURED
  FROM crime_t WHERE VICTIM_CODE NOT IN (SELECT DISTINCT VICTIM_CODE FROM victim_t);
END;

CALL victim_p();   

-- Create a Stored Procedure report_p-

DROP PROCEDURE IF EXISTS report_p;
DELIMITER $$ 
CREATE PROCEDURE report_p (week_num INTEGER)
BEGIN
	INSERT INTO report_t(
REPORT_NO,
INCIDENT_TIME, 
COMPLAINT_TYPE,
CCTV_FLAG,
AREA_CODE,
VICTIM_CODE,
OFFICER_CODE,
OFFENDER_CODE, 
OFFENDER_NAME,
OFFENDER_AGE,
OFFENDER_SEX,
REPEATED_OFFENDER,
NO_OF_OFFENCES,
OFFENDER_RELATION,
CRIME_CODE, 
CRIME_TYPE,
WEAPON_CODE,
WEAPON_DESC,
CASE_STATUS_CODE,
CASE_STATUS_DESC,
WEEK_NUMBER
) 
SELECT 
REPORT_NO,
INCIDENT_TIME, 
COMPLAINT_TYPE,
CCTV_FLAG,
AREA_CODE,
VICTIM_CODE,
OFFICER_CODE,
OFFENDER_CODE, 
OFFENDER_NAME,
OFFENDER_AGE,
OFFENDER_SEX,
REPEATED_OFFENDER,
NO_OF_OFFENCES,
OFFENDER_RELATION,
CRIME_CODE, 
CRIME_TYPE,
WEAPON_CODE,
WEAPON_DESC,
CASE_STATUS_CODE,
CASE_STATUS_DESC,
WEEK_NUMBER
	FROM crime_t WHERE WEEK_NUMBER = week_num;
END;
CALL report_p();		

-- Create a Stored Procedure officer_p-

DROP PROCEDURE IF EXISTS officer_p;
DELIMITER $$
CREATE PROCEDURE officer_p()
BEGIN
	INSERT INTO officer_t (
OFFICER_CODE,
OFFICER_NAME,
OFFICER_SEX,
AVG_CLOSE_DAYS,
PRECINCT_CODE
) 
    SELECT DISTINCT
OFFICER_CODE,
OFFICER_NAME,
OFFICER_SEX,
AVG_CLOSE_DAYS,
PRECINCT_CODE
   FROM crime_t WHERE OFFICER_CODE NOT IN (SELECT DISTINCT OFFICER_CODE FROM officer_t);
END;

CALL officer_p();


/*-----------------------------------------------------------------------------------------------------------------------------------

                                               Data Ingestion
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/

-- [5] Ingesting the data:
-- Note: Revisit the video: Week-2: Data Modeling and Architecture: Ingesting data into the main table

TRUNCATE temp_t;

LOAD DATA LOCAL INFILE "C:/Users/Marie/Documents/DSDMS Courses/SQL and Databases/Notes/crime_la_proj/Data/crime_la_w4.csv" -- change this location to load another week
INTO TABLE temp_t
FIELDS TERMINATED by ','
OPTIONALLY ENCLOSED BY '"' 
LINES TERMINATED BY '\n'
IGNORE 1 LINES;

call crime_p();
call report_p(4);
call officer_p();
call location_p();
call victim_p();

/* Note: 

---> With the help of the above code, you can ingest the data into the temp_t table by ingesting the quarterly data and by calling the storedÂ 
     procedures you can ingest the data into a separate table.
---> You have to run the above ingestion code 4 times as 4 quarters of data are present and you also need to call all the stored proceduresÂ 
     4 times. Please change the argument value while calling the stored procedure report_p(n). (n = 1,2,3,4)
---> If needed, revisit the videos: Week 2: Data Modeling and Architecture: Ingesting data into the main table and Ingesting future weeks of data
---> Also revisit the codes used to ingest the data for the gl_eats database.Â 
     This will help in getting a better understanding of how to ingest the data into various respective tables.*/


/*-----------------------------------------------------------------------------------------------------------------------------------

                                               Views Creation
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/

-- [6] Creating the views:

/*Note: 

---> If needed revisit the videos: Week-2: Data Modeling and Architecture: Creating views for answers to business questions
---> Also revisit the codes used to create views for the gl_eats database.Â 
	 This will help in getting a better understanding of the creation of views.*/
     
-- List of views to be created are "rep_loc_off_v" , "rep_vict_v"

-- Syntax to create view-

-- To drop the views if already exists- 
DROP VIEW IF EXISTS rep_loc_off_v;
CREATE VIEW rep_loc_off_v AS
SELECT
	rep.REPORT_NO,
	loc.AREA_CODE,
    rep.INCIDENT_TIME,
    rep.COMPLAINT_TYPE,
	rep.CCTV_FLAG,
	rep.CRIME_CODE,
	rep.CRIME_TYPE,
	rep.WEEK_NUMBER,
	rep.CASE_STATUS_DESC,
    rep.CASE_STATUS_CODE,
    loc.AREA_NAME,
    loc.CCTV_COUNT,
    loc.POPULATION_DENSITY,
    off.OFFICER_CODE,
    off.PRECINCT_CODE
FROM report_t rep
    INNER JOIN location_t loc
         ON rep.AREA_CODE = loc.AREA_CODE
    INNER JOIN officer_t off
		ON rep.OFFICER_CODE = off.OFFICER_CODE;
        
        -- Create a view rep_vict_v

DROP VIEW IF EXISTS rep_vict_v;
CREATE VIEW rep_vict_v AS
SELECT
      rep.REPORT_NO, 
      vict.VICTIM_CODE,
      rep.OFFENDER_RELATION,
      rep.CRIME_TYPE,
      rep.INCIDENT_TIME,
      vict.VICTIM_AGE
FROM report_t rep
	 INNER JOIN victim_t vict
           ON rep.VICTIM_CODE= vict.VICTIM_CODE;




/*-----------------------------------------------------------------------------------------------------------------------------------

                                               Functions Creation
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/

-- [7] Creating the functions:

/*Note: 

---> If needed revisit the videos: Week-2: Data Modeling and Architecture: Creating User Defined Functions
---> Also revisit the codes used to create functions for the gl_eats database.Â 
Â  Â  Â This will help in getting a better understanding of the creation of functions.*/

-- Create the function age_f

DROP FUNCTION IF EXISTS age_f;
DELIMITER $$  
CREATE FUNCTION age_f (victim_age INT) 
RETURNS VARCHAR(25)
DETERMINISTIC  
BEGIN  
  DECLARE age VARCHAR(25);
     IF VICTIM_AGE BETWEEN 0 and 12 THEN SET age = "Kids";
ELSEIF VICTIM_AGE BETWEEN 13 and 23 THEN SET age =  "Teenage";
ELSEIF VICTIM_AGE BETWEEN 24 and 35 THEN SET age = "Middle age";
ELSEIF VICTIM_AGE BETWEEN 36 and 55 THEN SET age =  "Adults";
ELSEIF VICTIM_AGE BETWEEN 56 and 120 THEN SET age =  "Old";
END IF;
RETURN (age);
END;


-- Create the function time_f-

DROP FUNCTION IF EXISTS time_f;
DELIMITER $$
CREATE FUNCTION time_f (INCIDENT_TIME TIME) 
RETURNS VARCHAR(25)
DETERMINISTIC
BEGIN 
DECLARE time_of_incident VARCHAR(25);
IF INCIDENT_TIME BETWEEN '00:00:00' AND '05:00:00' THEN SET time_of_incident='MIDNIGHT';
ELSEIF INCIDENT_TIME BETWEEN '05:00:01' AND '12:00:00' THEN SET time_of_incident='MORNING';
ELSEIF INCIDENT_TIME BETWEEN '12:00:01' AND '18:00:00' THEN SET time_of_incident='AFTERNOON';
ELSEIF INCIDENT_TIME BETWEEN '18:00:01' AND '21:00:00' THEN SET time_of_incident='EVENING';
ELSEIF INCIDENT_TIME BETWEEN '21:00:01' AND '24:00:00' THEN SET time_of_incident='NIGHT';
END IF;
RETURN (time_of_incident);
END;  

/*-----------------------------------------------------------------------------------------------------------------------------------
Note: 
After creating tables, stored procedures, views and functions, attempt the below questions.
Once you have got the answer to the below questions, download the csv file for each question and use it in Python for visualisations.
------------------------------------------------------------------------------------------------------------------------------------ 

  
  
-----------------------------------------------------------------------------------------------------------------------------------

                                                         Queries
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/
  
/*-- QUESTIONS RELATED TO CUSTOMERS
-- [Q1] Which was the most frequent crime committed each week? 
-- Hint: Use a subquery and the windows function to find out the number of crimes reported each week and assign a rank. 
Then find the highest crime committed each week

Note: For reference, refer to question number 3 - mls_week-1_gl-beats_solution.sql. 
      You'll get an overview of how to use subquery and windows function from this question */
      
  SELECT WEEK_NUMBER, CRIME_TYPE FROM (
  SELECT
        WEEK_NUMBER,
        CRIME_TYPE,
        COUNT(CRIME_CODE) AS COUNT_OF_HIGHEST_CRIME,
        RANK() OVER (PARTITION BY WEEK_NUMBER ORDER BY COUNT(CRIME_TYPE) DESC) rnk
  FROM REP_LOC_OFF_V
  GROUP BY 1,2) TBL
  WHERE rnk = 1
  ORDER BY 1;
-- ---------------------------------------------------------------------------------------------------------------------------------

/* -- [Q2] Is crime more prevalent in areas with a higher population density, fewer police personnel, and a larger precinct area? 
-- Hint: Add the population density, count the total areas, total officers and cases reported in each precinct code and check the trend*/
SELECT 
  PRECINCT_CODE,
  COUNT(DISTINCT CRIME_TYPE) AS CASES_REPORTED,
  COUNT(DISTINCT AREA_NAME) AS TOTAL_AREAS,
  SUM(POPULATION_DENSITY) AS TOTAL_POPULATION,
  COUNT(DISTINCT OFFICER_CODE) AS TOTAL_OFFICERS
FROM REP_LOC_OFF_V
GROUP BY PRECINCT_CODE;



-- ---------------------------------------------------------------------------------------------------------------------------------

/* -- [Q3] At what points of the day is the crime rate at its peak? Group this by the type of crime.
-- Hint: 
time day parts
[1] 00:00 to 05:00 = Midnight, 
[2] 05:01 to 12:00 = Morning, 
[3] 12:01 to 18:00 = Afternoon,
[4] 18:01 to 21:00 = Evening, 
[5] 21:00 to 24:00 = Night

Use a subquery, windows function, and the time_f function to find the number of crimes reported each week and assign the rank.
Then find out at what points of the day the crime rate is at its peak.
 
 Note: For reference, refer to question number 3 - mls_week-1_gl-beats_solution.sql. 
      You'll get an overview of how to use subquery, windows function from this question */
SELECT POINTS_OF_THE_DAY_THE_CRIME_RATE_IS_AT_ITS_PEAK, CRIME_TYPE FROM( 
SELECT
   WEEK_NUMBER,
   CRIME_TYPE,
   TIME_F(INCIDENT_TIME) POINTS_OF_THE_DAY_THE_CRIME_RATE_IS_AT_ITS_PEAK,
RANK() OVER (PARTITION BY week_number ORDER BY COUNT(CRIME_TYPE) DESC) rnk
FROM REP_LOC_OFF_V
GROUP BY 1,2)TBL
WHERE rnk = 1
ORDER BY 1;
- ---------------------------------------------------------------------------------------------------------------------------------

/* -- [Q4] At what point in the day do more crimes occur in a different locality?
-- Hint: 
time day parts
[1] 00:00 to 05:00 = Midnight, 
[2] 05:01 to 12:00 = Morning, 
[3] 12:01 to 18:00 = Afternoon,
[4] 18:01 to 21:00 = Evening, 
[5] 21:00 to 24:00 = Night

Use a subquery, the windows function, and the time_f function to find the number of crimes reported in each area and assign the rank.
Then find out at what point in the day more crimes occur in a different locality.
 
 Note: For reference, refer to question number 3 - mls_week-1_gl-beats_solution.sql. 
      You'll get an overview of how to use subquery, windows function from this question */
SELECT AREA_NAME, POINT_IN_THE_DAY_MORE_CRIMES_OCCUR_IN_A_DIFFERENT_LOCALITY  from(
SELECT
  AREA_NAME,
  CRIME_TYPE,
  TIME_F(INCIDENT_TIME) AS POINT_IN_THE_DAY_MORE_CRIMES_OCCUR_IN_A_DIFFERENT_LOCALITY,
RANK() OVER (PARTITION BY AREA_NAME ORDER BY COUNT(CRIME_TYPE) DESC) rnk
FROM REP_LOC_OFF_V
GROUP BY 1,2) tbl 
WHERE rnk = 1
ORDER BY 1;
-- ---------------------------------------------------------------------------------------------------------------------------------

/* -- [Q5] Which age group of people is more likely to fall victim to crimes at certain points in the day?
-- Hint: Age 0 to 12 kids, 13 to 23 teenage, 24 to 35 Middle age, 36 to 55 Adults, 56 to 120 old.
Use the age_f and time_f functions to find the counts of crimes reported for each age group and in different day parts.*/
SELECT AGE_GROUP, DAY_PARTS FROM (
SELECT
  AGE_F(VICTIM_AGE) AS AGE_GROUP,
  TIME_F(INCIDENT_TIME) AS DAY_PARTS,
  COUNT(CRIME_TYPE) AS CRIME_COUNTS
FROM REP_VICT_V
GROUP BY 1,2) tbl
ORDER BY CRIME_COUNTS DESC;   
-- ---------------------------------------------------------------------------------------------------------------------------------

/* -- [Q6] What is the status of reported crimes?.
-- Hint: Count the number of crimes for different case statuses. */

SELECT
   CASE_STATUS_CODE, 
   COUNT(*) AS REPORTED_CRIMES
FROM REP_LOC_OFF_V
GROUP BY 1,2
ORDER BY REPORTED_CRIMES DESC;

-- ---------------------------------------------------------------------------------------------------------------------------------

/* -- [Q7] Does the existence of CCTV cameras deter crimes from happening?
-- Hint: Check if there is a correlation between the number of CCTVs in each area and the crime rate.*/
      
SELECT 
  AREA_NAME,
  CCTV_COUNT,
  COUNT(CCTV_COUNT) AS CRIME_RATE
FROM REP_LOC_OFF_V
GROUP BY 1,2
ORDER BY CRIME_RATE DESC;
      
-- ---------------------------------------------------------------------------------------------------------------------------------

/* -- [Q8] How much footage has been recovered from the CCTV at the crime scene?
-- Hint: Use the case when function, add separately when cctv_flag is true and false and check whether in particular area how many cctv is there,
How much CCTV footage is available? How much CCTV footage is not available?

Note: For reference, refer to question number 7. Week-2: Hands-on (Practice)-GL_EATS_PRACTICE_EXERCISE_SOLUTION.SQL. 
      You'll get an overview of how to use case when function from this question.*/
SELECT
  AREA_NAME,
  COUNT(CCTV_COUNT) AS THE_CCTV_AT_THE_CRIME_SCENE,
  SUM(CASE WHEN CCTV_FLAG IS TRUE THEN CCTV_COUNT ELSE 0 END) FOOTAGE,
  SUM(CASE WHEN CCTV_FLAG IS FALSE THEN NOT CCTV_COUNT ELSE 0 END) / COUNT(*) AS "NO FOOTAGE"
FROM REP_LOC_OFF_V 
GROUP BY 1
ORDER BY 4 DESC;

-- ---------------------------------------------------------------------------------------------------------------------------------

/* -- [Q9] Is crime more likely to be committed by relation of victims than strangers?
-- Hint: Find the distinct crime type along with the count of crime when the offender is related to the victim.*/
SELECT
  CRIME_TYPE,
  COUNT(CRIME_TYPE) AS COUNT_OF_CRIME_WHEN_THE_OFFENDER_IS_RELATED_TO_THE_VICTIM
FROM REP_VICT_V
WHERE OFFENDER_RELATION = 'YES'
GROUP BY 1
ORDER BY COUNT(CRIME_TYPE) DESC;



-- ---------------------------------------------------------------------------------------------------------------------------------

/* -- [Q10] What are the methods used by the public to report a crime? 
-- Hint: Find the complaint type along with the count of crime.*/
SELECT
  COMPLAINT_TYPE,
  COUNT(*) AS COUNT_OF_CRIME
FROM REP_LOC_OFF_V
GROUP BY 1
ORDER BY  COUNT_OF_CRIME DESC;

-- --------------------------------------------------------Done----------------------------------------------------------------------
-- ----------------------------------------------------------------------------------------------------------------------------------



